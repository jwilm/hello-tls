//! Demonstrate retrieving the server name from a ClientHello message
//!
//! Normally, the provided bytes would come from a TCP socket. For purposes of demonstation, they
//! are provided inline.

extern crate tls_client_hello;

use tls_client_hello::ClientHelloBuilder;
use std::str;

fn main() {
    // Pretend like these are from a socket
    let bytes: Vec<u8> = vec![
        0x16, 0x03, 0x01, 0x01, 0x25, 0x01, 0x00, 0x01, 0x21, 0x03, 0x03, 0x73, 0x61, 0x2e, 0x82,
        0xaf, 0x80, 0x73, 0xa9, 0xb5, 0x7e, 0x28, 0xf8, 0x2a, 0x34, 0x7b, 0x2c, 0x3e, 0xfe, 0x7c,
        0x2c, 0x5f, 0xe6, 0x28, 0x7a, 0xd6, 0x1a, 0x35, 0x1b, 0x80, 0x81, 0x56, 0xaf, 0x00, 0x00,
        0x76, 0xc0, 0x30, 0xc0, 0x2c, 0xc0, 0x28, 0xc0, 0x24, 0xc0, 0x14, 0xc0, 0x0a, 0x00, 0xa3,
        0x00, 0x9f, 0x00, 0x6b, 0x00, 0x6a, 0x00, 0x39, 0x00, 0x38, 0x00, 0x88, 0x00, 0x87, 0xc0,
        0x32, 0xc0, 0x2e, 0xc0, 0x2a, 0xc0, 0x26, 0xc0, 0x0f, 0xc0, 0x05, 0x00, 0x9d, 0x00, 0x3d,
        0x00, 0x35, 0x00, 0x84, 0xc0, 0x12, 0xc0, 0x08, 0x00, 0x16, 0x00, 0x13, 0xc0, 0x0d, 0xc0,
        0x03, 0x00, 0x0a, 0xc0, 0x2f, 0xc0, 0x2b, 0xc0, 0x27, 0xc0, 0x23, 0xc0, 0x13, 0xc0, 0x09,
        0x00, 0xa2, 0x00, 0x9e, 0x00, 0x67, 0x00, 0x40, 0x00, 0x33, 0x00, 0x32, 0x00, 0x9a, 0x00,
        0x99, 0x00, 0x45, 0x00, 0x44, 0xc0, 0x31, 0xc0, 0x2d, 0xc0, 0x29, 0xc0, 0x25, 0xc0, 0x0e,
        0xc0, 0x04, 0x00, 0x9c, 0x00, 0x3c, 0x00, 0x2f, 0x00, 0x96, 0x00, 0x41, 0x00, 0xff, 0x01,
        0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x15, 0x00, 0x13, 0x00, 0x00, 0x10, 0x74, 0x65, 0x73,
        0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x00, 0x0b,
        0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00, 0x0a, 0x00, 0x34, 0x00, 0x32, 0x00, 0x0e, 0x00,
        0x0d, 0x00, 0x19, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x18, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x16,
        0x00, 0x17, 0x00, 0x08, 0x00, 0x06, 0x00, 0x07, 0x00, 0x14, 0x00, 0x15, 0x00, 0x04, 0x00,
        0x05, 0x00, 0x12, 0x00, 0x13, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x0f, 0x00, 0x10,
        0x00, 0x11, 0x00, 0x0d, 0x00, 0x20, 0x00, 0x1e, 0x06, 0x01, 0x06, 0x02, 0x06, 0x03, 0x05,
        0x01, 0x05, 0x02, 0x05, 0x03, 0x04, 0x01, 0x04, 0x02, 0x04, 0x03, 0x03, 0x01, 0x03, 0x02,
        0x03, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x03, 0x00, 0x0f, 0x00, 0x01, 0x01];

    let parser = ClientHelloBuilder::new();
    let client_hello = parser.parse_bytes(&bytes[..]).unwrap();

    // Find SNI extension
    for ext in client_hello.extensions {
        // zero indicates the SNI extension
        if ext.extension_type.0 == 0 {
            let name = str::from_utf8(&ext.extension_data[..]).unwrap();
            println!("name: {}", name);
        }
    }
}
